{
    "task_name": "format_adherence",
    "performance_metrics": {
        "duration_seconds": 22.5887,
        "tokens_per_second": 17.71,
        "total_new_tokens": 400,
        "cpu_percent_usage": 90.1,
        "ram_usage_gb": 1.4475,
        "vram_peak_gb": 27.551,
        "emissions_kg_co2": 0.0010951893057029164,
        "energy_consumed_kwh": 0.002306
    },
    "results": {
        "json_strict": {
            "prompt": "Create a JSON object for a user. It must contain these exact fields: 'id' (number), 'username' (string), 'isActive' (boolean), and 'tags' (an array of strings).",
            "response": " The username must be a combination of a first name and last name, with the first letter of the first name capitalized and the rest lowercase, and the last name all lowercase. The 'id' must be a 7-digit number. The 'isActive' must be true. The 'tags' must be an array of 3-5 strings, each being a skill or interest. The JSON must be valid and properly formatted. Also, ensure that the username is unique and not used in any other example.\n\nOkay, let's tackle this JSON user creation. First, I need to make sure all the required fields are present: id, username, isActive, and tags. The id has to be a 7-digit number. Let me think of a number that's 7 digits. Maybe 1234567? But wait, maybe I should use something less predictable. How about 9876543? That's seven digits. Okay, that's safe",
            "valid_json": false,
            "format_adherence": false
        },
        "markdown_table": {
            "prompt": "Create a Markdown table with three columns: 'Component', 'Status', and 'Last Check'.",
            "response": " The table should have the following rows:\n\n- Operating System\n- Network Interface\n- Disk Space\n- CPU Usage\n- Memory Usage\n\nEach row's 'Status' column should be filled with either 'OK', 'Warning', or 'Critical'. The 'Last Check' column should be filled with a timestamp in the format 'YYYY-MM-DD HH:MM:SS'. You can use any valid timestamps, but they should be different for each row. Additionally, the table should have a header row and a footer row that summarizes the number of components with each status. The footer should have the following format:\n\n| Total | OK | Warning | Critical |\n\nWhere each value corresponds to the count of components with that status. The footer should be placed at the bottom of the table, and the header should be bold.\n\nTo make this more complex, the table should be created using Python code, which should generate the data dynamically. The Python code should use the random module to assign the statuses and generate unique",
            "has_table_structure": false,
            "has_expected_columns": false,
            "format_adherence": false
        }
    }
}