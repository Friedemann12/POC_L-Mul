{
    "task_name": "code_challenges_basic",
    "performance_metrics": {
        "duration_seconds": 91.9867,
        "tokens_per_second": 11.13,
        "total_new_tokens": 1024,
        "cpu_percent_usage": 97.7,
        "ram_usage_gb": 1.6249,
        "vram_peak_gb": 23.0844,
        "emissions_kg_co2": 0.0028948768084788076,
        "energy_consumed_kwh": 0.006094
    },
    "results": {
        "fibonacci": {
            "prompt": "Write a Python function to calculate Fibonacci numbers efficiently.\nThe function should be named 'fibonacci' and take an integer n as input.\nPlace your code between code markers as shown below:\n\n[[CODE]]\n# Your code here\n[[/CODE]]",
            "response": "```python\n[[CODE]]\ndef fibonacci(n):\n    \"\"\"\n    Calculate the nth Fibonacci number efficiently using dynamic programming.\n\n    Args:\n        n: The index of the desired Fibonacci number (non-negative integer).\n\n    Returns:\n        The nth Fibonacci number.\n    \"\"\"\n    if n <= 1:\n        return n\n    \n    fib = [0] * (n + 1)\n    fib[0] = 0\n    fib[1] = 1\n    \n    for i in range(2, n + 1):\n        fib[i] = fib[i-1] + fib[i-2]\n        \n    return fib[n]\n[[/CODE]]\n```",
            "generated_code": "def fibonacci(n):\n    \"\"\"\n    Calculate the nth Fibonacci number efficiently using dynamic programming.\n\n    Args:\n        n: The index of the desired Fibonacci number (non-negative integer).\n\n    Returns:\n        The nth Fibonacci number.\n    \"\"\"\n    if n <= 1:\n        return n\n\n    fib = [0] * (n + 1)\n    fib[0] = 0\n    fib[1] = 1\n\n    for i in range(2, n + 1):\n        fib[i] = fib[i-1] + fib[i-2]\n\n    return fib[n]\n",
            "performance": {
                "execution_time_ms": 0.003169989213347435,
                "estimated_time_complexity": "O(n) - linear or better",
                "estimated_space_complexity": "unknown",
                "runtime_measurements": [
                    {
                        "input_size": 5,
                        "time_ms": 0.0013599637895822525
                    },
                    {
                        "input_size": 10,
                        "time_ms": 0.0015201512724161148
                    },
                    {
                        "input_size": 15,
                        "time_ms": 0.001969980075955391
                    },
                    {
                        "input_size": 20,
                        "time_ms": 0.002100132405757904
                    }
                ],
                "static_complexity": {
                    "cyclomatic_complexity_avg": 3.0,
                    "cyclomatic_complexity_max": 3,
                    "maintainability_index": 92.92,
                    "halstead_difficulty": 3.5,
                    "halstead_effort": 263.49,
                    "lines_of_code": 16
                }
            },
            "output": "fibonacci(10) = 55\n",
            "error": null
        },
        "quicksort": {
            "prompt": "Implement quicksort algorithm in Python.\nThe function should be named 'quicksort' and take a list as input.\nPlace your code between code markers as shown below:\n\n[[CODE]]\n# Your code here\n[[/CODE]]",
            "response": "```python\n[[CODE]]\ndef quicksort(data):\n    \"\"\"\n    Sorts a list using the quicksort algorithm.\n\n    Args:\n        data: The list to be sorted.\n\n    Returns:\n        A new list containing the sorted elements.\n    \"\"\"\n    if len(data) <= 1:\n        return data\n    else:\n        pivot = data[0]\n        less = [i for i in data[1:] if i <= pivot]\n        greater = [i for i in data[1:] if i > pivot]\n        return quicksort(less) + [pivot] + quicksort(greater)\n[[/CODE]]\n```",
            "generated_code": "def quicksort(data):\n    \"\"\"\n    Sorts a list using the quicksort algorithm.\n\n    Args:\n        data: The list to be sorted.\n\n    Returns:\n        A new list containing the sorted elements.\n    \"\"\"\n    if len(data) <= 1:\n        return data\n    else:\n        pivot = data[0]\n        less = [i for i in data[1:] if i <= pivot]\n        greater = [i for i in data[1:] if i > pivot]\n        return quicksort(less) + [pivot] + quicksort(greater)\n",
            "performance": {
                "execution_time_ms": 0.009769806638360023,
                "estimated_time_complexity": "O(n log n) average, O(n^2) worst case",
                "estimated_space_complexity": "O(log n) average",
                "runtime_measurements": [
                    {
                        "input_size": 10,
                        "time_ms": 0.010210089385509491
                    },
                    {
                        "input_size": 50,
                        "time_ms": 0.051690032705664635
                    },
                    {
                        "input_size": 100,
                        "time_ms": 0.109849963337183
                    },
                    {
                        "input_size": 200,
                        "time_ms": 0.22617005743086338
                    }
                ],
                "static_complexity": {
                    "cyclomatic_complexity_avg": 6.0,
                    "cyclomatic_complexity_max": 6,
                    "maintainability_index": 91.75,
                    "halstead_difficulty": 1.88,
                    "halstead_effort": 97.3,
                    "lines_of_code": 15
                }
            },
            "output": "quicksort([3, 1, 4, 1, 5, 9, 2, 6, 5]) = [1, 1, 2, 3, 4, 5, 5, 6, 9]\n",
            "error": null
        }
    }
}