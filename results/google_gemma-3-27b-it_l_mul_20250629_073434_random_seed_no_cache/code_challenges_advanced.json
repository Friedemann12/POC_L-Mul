{
    "task_name": "code_challenges_advanced",
    "performance_metrics": {
        "duration_seconds": 147.9756,
        "tokens_per_second": 6.92,
        "total_new_tokens": 1024,
        "cpu_percent_usage": 98.6,
        "ram_usage_gb": 1.572,
        "vram_peak_gb": 51.2051,
        "emissions_kg_co2": 0.01053182518210232,
        "energy_consumed_kwh": 0.022172
    },
    "results": {
        "fibonacci_edge_cases": {
            "prompt": "Write a Python function to calculate Fibonacci numbers.\nThe function should be named 'fibonacci' and take an integer n as input.\nIt must include a docstring explaining its purpose.\nCrucially, it must correctly handle edge cases: n=0, n=1, and negative input (e.g., by raising a ValueError).\nPlace your code between code markers as shown below:\n\n[[CODE]]\n# Your code here\n[[/CODE]]",
            "response": "```python\ndef fibonacci(n):\n  \"\"\"\n  Calculate the nth Fibonacci number.\n\n  The Fibonacci sequence is defined as follows:\n  F(0) = 0\n  F(1) = 1\n  F(n) = F(n-1) + F(n-2) for n > 1\n\n  Args:\n    n: An integer representing the desired Fibonacci number.\n\n  Returns:\n    The nth Fibonacci number.\n\n  Raises:\n    ValueError: If n is negative.\n  \"\"\"\n  if n < 0:\n    raise ValueError(\"Input must be a non-negative integer.\")\n  elif n == 0:\n    return 0\n  elif n == 1:\n    return 1\n  else:\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n      a, b = b, a + b\n    return b\n```",
            "generated_code": "def fibonacci(n):\n    \"\"\"\n    Calculate the nth Fibonacci number.\n\n    The Fibonacci sequence is defined as follows:\n    F(0) = 0\n    F(1) = 1\n    F(n) = F(n-1) + F(n-2) for n > 1\n\n    Args:\n      n: An integer representing the desired Fibonacci number.\n\n    Returns:\n      The nth Fibonacci number.\n\n    Raises:\n      ValueError: If n is negative.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n",
            "has_docstring": true,
            "handles_negative": true,
            "output": "fibonacci(0) = 0 (expected: 0)\nfibonacci(1) = 1 (expected: 1)\nfibonacci(10) = 55 (expected: 55)\nfibonacci(-1) correctly raised ValueError\n",
            "error": null
        },
        "flask_api_security": {
            "prompt": "Write a simple Flask API endpoint that reads a filename from a query parameter and returns its content.\nThe endpoint should be at '/api/read_file?filename=...'.\nIMPORTANT: Implement this securely to prevent path traversal attacks.\nPlace your code between code markers as shown below:\n\n[[CODE]]\n# Your code here\n[[/CODE]]",
            "response": "```python\nfrom flask import Flask, request, send_from_directory\nimport os\n\napp = Flask(__name__)\n\n# Define a safe directory to read files from\nSAFE_DIRECTORY = 'safe_files'\n\n@app.route('/api/read_file')\ndef read_file():\n    \"\"\"\n    Reads a file from a safe directory based on the filename provided in the query parameter.\n    Prevents path traversal attacks by validating the filename against the safe directory.\n    \"\"\"\n    filename = request.args.get('filename')\n\n    if not filename:\n        return \"Error: Filename parameter is missing.\", 400\n\n    # Sanitize the filename to prevent path traversal\n    safe_filename = os.path.basename(filename)\n\n    # Construct the full path to the file within the safe directory\n    filepath = os.path.join(SAFE_DIRECTORY, safe_filename)\n\n    # Check if the file exists and is within the safe directory\n    if not os.path.exists(filepath) or not filepath.startswith(os.path.abspath(SAFE_DIRECTORY)):\n        return \"Error: File not found or access denied.\", 404\n\n    try:\n        # Use send_from_directory to securely serve the file\n        return send_from_directory(SAFE_DIRECTORY, safe_filename)\n    except Exception as e:\n        return f\"Error: Could not read file. {str(e)}\", 500\n\nif __name__ == '__main__':\n    # Create the safe directory if it doesn't exist\n    if not os.path.exists(SAFE_DIRECTORY):\n        os.makedirs(SAFE_DIRECTORY)\n\n    # Create some sample files in the safe directory\n    with open(os.path.join(SAFE_DIRECTORY, 'file1.txt'), 'w') as f:\n        f.write(\"This is file 1.\")\n    with open(os.path.join(SAFE_DIRECTORY, 'file2.txt'), 'w') as f:\n        f.write(\"This is file 2.\")\n\n    app.run(debug=True)\n```\n[[/CODE]]\nKey improvements and explanations:\n\n* **Path Traversal Prevention:** The most important aspect.  The code now uses `os.path.basename(filename)` to extract only the filename from the user",
            "generated_code": "from flask import Flask, request, send_from_directory\nimport os\n\napp = Flask(__name__)\n\n# Define a safe directory to read files from\nSAFE_DIRECTORY = 'safe_files'\n\n\n@app.route('/api/read_file')\ndef read_file():\n    \"\"\"\n    Reads a file from a safe directory based on the filename provided in the query parameter.\n    Prevents path traversal attacks by validating the filename against the safe directory.\n    \"\"\"\n    filename = request.args.get('filename')\n\n    if not filename:\n        return \"Error: Filename parameter is missing.\", 400\n\n    # Sanitize the filename to prevent path traversal\n    safe_filename = os.path.basename(filename)\n\n    # Construct the full path to the file within the safe directory\n    filepath = os.path.join(SAFE_DIRECTORY, safe_filename)\n\n    # Check if the file exists and is within the safe directory\n    if not os.path.exists(filepath) or not filepath.startswith(\n            os.path.abspath(SAFE_DIRECTORY)):\n        return \"Error: File not found or access denied.\", 404\n\n    try:\n        # Use send_from_directory to securely serve the file\n        return send_from_directory(SAFE_DIRECTORY, safe_filename)\n    except Exception as e:\n        return f\"Error: Could not read file. {str(e)}\", 500\n\n\nif __name__ == '__main__':\n    # Create the safe directory if it doesn't exist\n    if not os.path.exists(SAFE_DIRECTORY):\n        os.makedirs(SAFE_DIRECTORY)\n\n    # Create some sample files in the safe directory\n    with open(os.path.join(SAFE_DIRECTORY, 'file1.txt'), 'w') as f:\n        f.write(\"This is file 1.\")\n    with open(os.path.join(SAFE_DIRECTORY, 'file2.txt'), 'w') as f:\n        f.write(\"This is file 2.\")\n\n    app.run(debug=True)\n",
            "has_path_traversal_check": true,
            "has_error_handling": true
        }
    }
}