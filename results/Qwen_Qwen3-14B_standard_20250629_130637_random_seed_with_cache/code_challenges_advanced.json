{
    "task_name": "code_challenges_advanced",
    "performance_metrics": {
        "duration_seconds": 50.705,
        "tokens_per_second": 20.2,
        "total_new_tokens": 1024,
        "cpu_percent_usage": 95.7,
        "ram_usage_gb": 1.4833,
        "vram_peak_gb": 27.6354,
        "emissions_kg_co2": 0.0018813794657690384,
        "energy_consumed_kwh": 0.003961
    },
    "results": {
        "fibonacci_edge_cases": {
            "prompt": "Write a Python function to calculate Fibonacci numbers.\nThe function should be named 'fibonacci' and take an integer n as input.\nIt must include a docstring explaining its purpose.\nCrucially, it must correctly handle edge cases: n=0, n=1, and negative input (e.g., by raising a ValueError).\nPlace your code between code markers as shown below:\n\n[[CODE]]\n# Your code here\n[[/CODE]]",
            "response": "[[CODE]]\ndef fibonacci(n):\n    \"\"\"\n    Calculate the nth Fibonacci number.\n    \n    The Fibonacci sequence is defined as:\n    F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1.\n    \n    Parameters:\n    n (int): The index of the Fibonacci number to compute.\n    \n    Returns:\n    int: The nth Fibonacci number.\n    \n    Raises:\n    ValueError: If n is negative.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n[[/CODE]] [[CODE]]\ndef fibonacci(n):\n    \"\"\"\n    Calculate the nth Fibonacci number.\n    \n    The Fibonacci sequence is defined as:\n    F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1.\n    \n    Parameters:\n    n (int): The index of the Fibonacci number to compute.\n    \n    Returns:\n    int: The nth Fibonacci number.\n    \n    Raises:\n    ValueError: If n is negative.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n[[/CODE]] [[CODE]]\ndef fibonacci(n):\n    \"\"\"\n    Calculate the nth Fibonacci number.\n    \n    The Fibonacci sequence is defined as:\n    F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1.\n    \n    Parameters:\n    n (int): The index of the Fibonacci number to compute.\n    \n    Returns:\n    int: The nth Fibonacci number.\n    \n    Raises:\n    ValueError: If n is negative.\n    \"\"\"\n    if n < 0:\n        raise ValueError",
            "generated_code": "def fibonacci(n):\n    \"\"\"\n    Calculate the nth Fibonacci number.\n\n    The Fibonacci sequence is defined as:\n    F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1.\n\n    Parameters:\n    n (int): The index of the Fibonacci number to compute.\n\n    Returns:\n    int: The nth Fibonacci number.\n\n    Raises:\n    ValueError: If n is negative.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n",
            "has_docstring": true,
            "handles_negative": true,
            "output": "fibonacci(0) = 0 (expected: 0)\nfibonacci(1) = 1 (expected: 1)\nfibonacci(10) = 55 (expected: 55)\nfibonacci(-1) correctly raised ValueError\n",
            "error": null
        },
        "flask_api_security": {
            "prompt": "Write a simple Flask API endpoint that reads a filename from a query parameter and returns its content.\nThe endpoint should be at '/api/read_file?filename=...'.\nIMPORTANT: Implement this securely to prevent path traversal attacks.\nPlace your code between code markers as shown below:\n\n[[CODE]]\n# Your code here\n[[/CODE]]",
            "response": "[[CODE]]\nfrom flask import Flask, request, abort\n\napp = Flask(__name__)\n\n@app.route('/api/read_file', methods=['GET'])\ndef read_file():\n    filename = request.args.get('filename')\n    if not filename:\n        abort(400, description=\"Filename is required\")\n    \n    # Prevent path traversal by ensuring the filename is absolute and within a specific directory\n    # For example, restrict to a 'safe' directory\n    safe_directory = '/path/to/safe/directory'  # This should be set to an actual safe path\n    absolute_path = safe_directory + '/' + filename\n    \n    # Check if the path is within the safe directory to prevent traversal\n    if not absolute_path.startswith(safe_directory + '/'):\n        abort(400, description=\"Invalid filename\")\n    \n    try:\n        with open(absolute_path, 'r') as file:\n            content = file.read()\n        return {'content': content}\n    except FileNotFoundError:\n        abort(404, description=\"File not found\")\n    except Exception as e:\n        abort(500, description=\"Error reading file\")\n\nif __name__ == '__main__':\n    app.run(debug=False)\n[[/CODE]] [[CODE]]\nfrom flask import Flask, request, abort\n\napp = Flask(__name__)\n\n@app.route('/api/read_file', methods=['GET'])\ndef read_file():\n    filename = request.args.get('filename')\n    if not filename:\n        abort(400, description=\"Filename is required\")\n    \n    # Prevent path traversal by ensuring the filename is absolute and within a specific directory\n    # For example, restrict to a 'safe' directory\n    safe_directory = '/path/to/safe/directory'  # This should be set to an actual safe path\n    absolute_path = safe_directory + '/' + filename\n    \n    # Check if the path is within the safe directory to prevent traversal\n    if not absolute_path.startswith(safe_directory + '/'):\n        abort(400, description=\"Invalid filename\")\n    \n    try:\n        with open(absolute_path, 'r') as file:\n            content = file.read()\n        return {'content': content}\n    except FileNotFoundError:\n        abort(404, description=\"File not found\")\n    except Exception as e:\n        abort(500, description=\"Error reading file\")\n\nif __name__ == '__main__':\n    app.run(debug=False)\n[[/CODE]] [[CODE]]\nfrom flask import Flask, request, abort\n\napp =",
            "generated_code": "from flask import Flask, request, abort\n\napp = Flask(__name__)\n\n\n@app.route('/api/read_file', methods=['GET'])\ndef read_file():\n    filename = request.args.get('filename')\n    if not filename:\n        abort(400, description=\"Filename is required\")\n\n    # Prevent path traversal by ensuring the filename is absolute and within a specific directory\n    # For example, restrict to a 'safe' directory\n    # This should be set to an actual safe path\n    safe_directory = '/path/to/safe/directory'\n    absolute_path = safe_directory + '/' + filename\n\n    # Check if the path is within the safe directory to prevent traversal\n    if not absolute_path.startswith(safe_directory + '/'):\n        abort(400, description=\"Invalid filename\")\n\n    try:\n        with open(absolute_path, 'r') as file:\n            content = file.read()\n        return {'content': content}\n    except FileNotFoundError:\n        abort(404, description=\"File not found\")\n    except Exception as e:\n        abort(500, description=\"Error reading file\")\n\n\nif __name__ == '__main__':\n    app.run(debug=False)\n",
            "has_path_traversal_check": false,
            "has_error_handling": true
        }
    }
}