{
    "task_name": "code_challenges_basic",
    "performance_metrics": {
        "duration_seconds": 117.3275,
        "tokens_per_second": 8.73,
        "total_new_tokens": 1024,
        "cpu_percent_usage": 98.2,
        "ram_usage_gb": 1.6311,
        "vram_peak_gb": 51.5902,
        "emissions_kg_co2": 0.00420334402095912,
        "energy_consumed_kwh": 0.008849
    },
    "results": {
        "fibonacci": {
            "prompt": "Write a Python function to calculate Fibonacci numbers efficiently.\nThe function should be named 'fibonacci' and take an integer n as input.\nPlace your code between code markers as shown below:\n\n[[CODE]]\n# Your code here\n[[/CODE]]",
            "response": "memo = {}\n\ndef fibonacci(n):\n    \"\"\"\n    Calculate Fibonacci numbers efficiently using memoization.\n\n    Args:\n        n: The index of the Fibonacci number to calculate (non-negative integer).\n\n    Returns:\n        The nth Fibonacci number.\n    \"\"\"\n    if n in memo:\n        return memo[n]\n    if n <= 1:\n        return n\n    memo[n] = fibonacci(n-1) + fibonacci(n-2)\n    return memo[n]\n[[/CODE]]",
            "generated_code": null,
            "performance": {
                "error": "Could not find code block"
            },
            "output": null,
            "error": "Could not find code block in the generated text."
        },
        "quicksort": {
            "prompt": "Implement quicksort algorithm in Python.\nThe function should be named 'quicksort' and take a list as input.\nPlace your code between code markers as shown below:\n\n[[CODE]]\n# Your code here\n[[/CODE]]",
            "response": "```python\n[[CODE]]\ndef quicksort(arr):\n    \"\"\"\n    Sorts a list using the quicksort algorithm.\n\n    Args:\n        arr: The list to be sorted.\n\n    Returns:\n        The sorted list.\n    \"\"\"\n    if len(arr) < 2:\n        return arr  # Base case: lists with 0 or 1 element are already sorted\n    else:\n        pivot = arr[0]  # Choose the first element as the pivot\n        less = [i for i in arr[1:] if i <= pivot]  # Sub-array of all the elements less than the pivot\n        greater = [i for i in arr[1:] if i > pivot]  # Sub-array of all the elements greater than the pivot\n        return quicksort(less) + [pivot] + quicksort(greater)\n[[/CODE]]\n```",
            "generated_code": "def quicksort(arr):\n    \"\"\"\n    Sorts a list using the quicksort algorithm.\n\n    Args:\n        arr: The list to be sorted.\n\n    Returns:\n        The sorted list.\n    \"\"\"\n    if len(arr) < 2:\n        return arr  # Base case: lists with 0 or 1 element are already sorted\n    else:\n        pivot = arr[0]  # Choose the first element as the pivot\n        # Sub-array of all the elements less than the pivot\n        less = [i for i in arr[1:] if i <= pivot]\n        # Sub-array of all the elements greater than the pivot\n        greater = [i for i in arr[1:] if i > pivot]\n        return quicksort(less) + [pivot] + quicksort(greater)\n",
            "performance": {
                "execution_time_ms": 0.009879935532808304,
                "estimated_time_complexity": "O(n log n) average, O(n^2) worst case",
                "estimated_space_complexity": "O(log n) average",
                "runtime_measurements": [
                    {
                        "input_size": 10,
                        "time_ms": 0.009490177035331726
                    },
                    {
                        "input_size": 50,
                        "time_ms": 0.050620175898075104
                    },
                    {
                        "input_size": 100,
                        "time_ms": 0.11654011905193329
                    },
                    {
                        "input_size": 200,
                        "time_ms": 0.22333022207021713
                    }
                ],
                "static_complexity": {
                    "cyclomatic_complexity_avg": 6.0,
                    "cyclomatic_complexity_max": 6,
                    "maintainability_index": 83.46,
                    "halstead_difficulty": 2.5,
                    "halstead_effort": 134.44,
                    "lines_of_code": 15
                }
            },
            "output": "quicksort([3, 1, 4, 1, 5, 9, 2, 6, 5]) = [1, 1, 2, 3, 4, 5, 5, 6, 9]\n",
            "error": null
        }
    }
}